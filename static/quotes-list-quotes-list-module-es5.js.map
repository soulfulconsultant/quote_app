{"version":3,"sources":["webpack:///src/app/quotes-list/quotes-list.module.ts","webpack:///src/app/quotes-list/components/quotes-list-container/quotes-list-container.component.ts","webpack:///src/app/quotes-list/components/quotes-list-container/quotes-list-container.component.html","webpack:///src/app/quotes-list/components/index.ts","webpack:///src/app/quotes-list/components/quotes-list-container/quotes-list-container.models.rules.ts","webpack:///src/app/quotes-list/components/delete-quote-modal/delete-quote-modal.component.ts","webpack:///src/app/quotes-list/components/delete-quote-modal/delete-quote-modal.component.html","webpack:///src/app/quotes-list/quotes-list-routing.module.ts","webpack:///src/app/quotes-list/components/quotes-list-table/quotes-list-table.component.ts","webpack:///src/app/quotes-list/components/quotes-list-table/quotes-list-table.component.html"],"names":["COMPONENTS","QuotesListModule","QuotesListContainerComponent","quoteService","quotes$$","quotes$","asObservable","getAll","pipe","subscribe","quotes","data","next","id","deleteById","getTableData","map","text","author","value","getQuoteFromTableDataSource","tableData","filterDeleted","filter","quote","isDeleted","DeleteQuoteModalComponent","modalService","modal","get","deleteQuote","quoteIdToDelete","getData","setData","close","cancel","routes","path","component","QuotesListRoutingModule","forChild","QuotesListTableComponent","router","columns","label","key","isControlCellAvailable","apiUrls","isLoading$","push","row","navigate","edit","listenToShareModalEvents","createAndOpenDeleteQuoteModal","create","open","onClose","onDataAdded","emit","onCloseFinished","onDismissFinished","removeModal"],"mappings":"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","file":"quotes-list-quotes-list-module-es5.js","sourcesContent":["import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { SharedModule } from '../shared/shared.module';\nimport { DeleteQuoteModalComponent, QuotesListContainerComponent, QuotesListTableComponent } from './components';\nimport { QuotesListRoutingModule } from './quotes-list-routing.module';\n\nconst COMPONENTS = [\n  QuotesListContainerComponent,\n  QuotesListTableComponent,\n  DeleteQuoteModalComponent,\n];\n\n@NgModule({\n  declarations: [\n    ...COMPONENTS,\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    QuotesListRoutingModule,\n  ],\n})\nexport class QuotesListModule { }\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\n\nimport { Quote } from '../../../models';\nimport { QuoteService } from '../../../services';\nimport { TableDataSource } from '../../../shared/components/table/table.models';\nimport { filterDeleted, getTableData } from './quotes-list-container.models.rules';\n\n@Component({\n  selector: 'app-quotes-list-container',\n  templateUrl: './quotes-list-container.component.html',\n  styleUrls: [ './quotes-list-container.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class QuotesListContainerComponent {\n\n  private quotes$$ = new BehaviorSubject<TableDataSource[]>(null);\n  quotes$ = this.quotes$$.asObservable();\n\n  constructor(\n    private quoteService: QuoteService,\n  ) {\n    this.getAll().pipe(\n      take(1),\n    ).subscribe();\n  }\n\n  getAll(): Observable<TableDataSource[]> {\n    return this.quoteService.getAll().pipe(\n      map((quotes: Quote[]) => filterDeleted(quotes)),\n      map(getTableData),\n      tap((data: TableDataSource[]) => this.quotes$$.next(data)),\n    );\n  }\n\n  deleteById(id: string): void {\n    this.quoteService.delete(id).pipe(\n      take(1),\n      switchMap(() => this.getAll()),\n    ).subscribe();\n  }\n}\n","<app-quotes-list-table\n  [data]=\"quotes$ | async\"\n  (delete)=\"deleteById($event)\"\n>\n</app-quotes-list-table>\n","export * from './quotes-list-container/quotes-list-container.component';\nexport * from './quotes-list-table/quotes-list-table.component';\nexport * from './delete-quote-modal/delete-quote-modal.component';\n","import { Quote } from '../../../models';\nimport { TableDataSource } from '../../../shared/components/table/table.models';\n\nexport function getTableData(data: Quote[]): TableDataSource[] {\n  return data.map(({ text, author, id }: Quote) => {\n    return {\n      id: {\n        value: id,\n      },\n      text: {\n        value: text,\n      },\n      author: {\n        value: author,\n      },\n    };\n  });\n}\n\nexport function getQuoteFromTableDataSource(tableData: TableDataSource): Quote {\n  return {\n    id: tableData.id.value,\n    text: tableData.text.value,\n    author: tableData.author.value,\n  };\n}\n\nexport function filterDeleted(quotes: Quote[]): Quote[] {\n  return quotes.filter((quote: Quote) => !quote.isDeleted);\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\nimport { NgxSmartModalComponent, NgxSmartModalService } from 'ngx-smart-modal';\n\nimport { ModalIds } from '../../../quote/components/view.models';\n\n@Component({\n  selector: 'app-delete-quote-modal',\n  templateUrl: './delete-quote-modal.component.html',\n  styleUrls: [ './delete-quote-modal.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeleteQuoteModalComponent implements OnInit {\n  private modal: NgxSmartModalComponent;\n  private quoteIdToDelete;\n\n  constructor(\n    private modalService: NgxSmartModalService,\n  ) { }\n\n  ngOnInit(): void {\n    this.modal = this.modalService.get(ModalIds.deleteQuote);\n    this.quoteIdToDelete = this.modal.getData();\n  }\n\n  deleteQuote() {\n    this.modal.setData(this.quoteIdToDelete, true);\n    this.modal.close();\n  }\n\n  cancel() {\n    this.modal.setData(null, true);\n    this.modal.close();\n  }\n\n}\n","<p>Are you sure you want to delete this quote ?</p>\n\n<div class=\"button-wrapper\">\n  <app-button\n    label=\"Yes\"\n    (clicked)=\"deleteQuote()\"\n  >\n  </app-button>\n  <app-button\n    class=\"cancel-btn\"\n    label=\"Cancel\"\n    (clicked)=\"cancel()\"\n  >\n  </app-button>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { QuotesListContainerComponent } from './components';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: QuotesListContainerComponent,\n  },\n];\n\n@NgModule({\n  imports: [ RouterModule.forChild(routes) ],\n  exports: [ RouterModule ],\n})\nexport class QuotesListRoutingModule { }\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { NgxSmartModalComponent, NgxSmartModalService } from 'ngx-smart-modal';\nimport { combineLatest, of, race } from 'rxjs';\nimport { switchMap, take, tap } from 'rxjs/operators';\n\nimport { environment } from '../../../../environments/environment';\nimport { RoutesPaths } from '../../../app-routing.config';\nimport { ModalIds } from '../../../quote/components/view.models';\nimport { QuoteService } from '../../../services';\nimport { TableDataSource, TableHeadColumns } from '../../../shared/components/table/table.models';\nimport { DeleteQuoteModalComponent } from '../delete-quote-modal/delete-quote-modal.component';\nimport { getQuoteFromTableDataSource } from '../quotes-list-container/quotes-list-container.models.rules';\n\n@Component({\n  selector: 'app-quotes-list-table',\n  templateUrl: './quotes-list-table.component.html',\n  styleUrls: [ './quotes-list-table.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class QuotesListTableComponent {\n  @Output() delete = new EventEmitter<string>();\n  @Input() data: TableDataSource[];\n\n  columns: TableHeadColumns[] = [\n    {\n      label: 'Text',\n      key: 'text',\n    },\n    {\n      label: 'Author',\n      key: 'author',\n    },\n  ];\n\n  isControlCellAvailable = environment.apiUrls.quote;\n\n  isLoading$ = this.quoteService.isLoading$;\n\n  constructor(\n    private router: Router,\n    private modalService: NgxSmartModalService,\n    private quoteService: QuoteService,\n  ) {\n    if (this.isControlCellAvailable) {\n      this.columns.push({\n        label: 'Action',\n        key: 'action',\n      });\n    }\n  }\n\n  editQuote(row: TableDataSource) {\n    const { id } = getQuoteFromTableDataSource(row);\n\n    this.router.navigate([ `/${ RoutesPaths.quotes }`, RoutesPaths.edit, id ]);\n  }\n\n  deleteQuote(row: TableDataSource) {\n    const { id } = getQuoteFromTableDataSource(row);\n\n    this.listenToShareModalEvents(this.createAndOpenDeleteQuoteModal(id));\n  }\n\n  private createAndOpenDeleteQuoteModal(id: string): NgxSmartModalComponent {\n    return this.modalService\n      .create<DeleteQuoteModalComponent>(ModalIds.deleteQuote, DeleteQuoteModalComponent)\n      .setData(id)\n      .open();\n  }\n\n  private listenToShareModalEvents(modal: NgxSmartModalComponent): void {\n    // Listen to modal result\n    combineLatest([\n      modal.onClose,\n      modal.onDataAdded,\n    ]).pipe(\n      switchMap(([ , id ]: [ any, any ]) => {\n        if (id) {\n          this.delete.emit(id);\n        }\n\n        return of(null);\n      }),\n      take(1),\n    ).subscribe();\n\n    // Destroy modal after its close/dismiss to not duplicate its instances within modalService\n    race(\n      modal.onCloseFinished,\n      modal.onDismissFinished,\n    )\n      .pipe(\n        take(1),\n        tap(() => this.modalService.removeModal(ModalIds.deleteQuote)),\n      ).subscribe();\n  }\n\n}\n","<app-table\n  *ngIf=\"!(isLoading$ | async); else loader\"\n  [tableData]=\"data\"\n  [columns]=\"columns\"\n>\n  <ng-template name=\"control-cell\" let-row>\n    <button (click)=\"editQuote(row)\">Edit</button>\n    <button (click)=\"deleteQuote(row)\">Delete</button>\n  </ng-template>\n</app-table>\n\n<ng-template #loader>\n  <app-loader></app-loader>\n</ng-template>\n"]}