{"version":3,"sources":["webpack:///src/app/api-services/quote-api.service.ts","webpack:///src/app/services/index.ts","webpack:///src/app/api-services/index.ts","webpack:///node_modules/quotesy/lib/index.js","webpack:///src/app/services/quote.service.ts"],"names":["QuoteApiService","http","apiBase","apiUrls","quote","shareApiBase","share","url","get","pipe","res","data","id","tag","params","fromObject","contactDetails","post","quoteId","put","quotes","parse_json","random","Math","floor","length","random_by_tag","q_by_tag","filter","q","text","includes","tags","module","exports","QUOTESY","providedIn","factory","QuoteService","quotesApi","toastrService","isLoading$$","isLoading$","asObservable","quote$$","quote$","hasApiUrl","hasShareApiUrl","next","getRandom","emitQuote","err","getById","edit","success","create","getAll","contactData","console","info"],"mappings":"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","file":"default~quote-edit-quote-edit-module~quote-new-quote-new-module~quote-quote-module~quotes-list-quote~f47df4a7-es5.js","sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from '../../environments/environment';\nimport { ContactData, Quote } from '../models';\n\n@Injectable({ providedIn: 'root' })\nexport class QuoteApiService {\n  private apiBase: string = environment.apiUrls.quote;\n  private shareApiBase: string = environment.apiUrls.share;\n\n  constructor(\n    private http: HttpClient,\n  ) {}\n\n  /**\n   *\n   * @returns {Observable<Quote>}\n   */\n  getAll(): Observable<Quote[]> {\n    const url = `${ this.apiBase }/quotes`;\n\n    return this.http.get<Quote[]>(url).pipe(\n      map((res: any) => res.data),\n    );\n  }\n\n  getById(id: string): Observable<Quote> {\n    const url = `${ this.apiBase }/quotes/${ id }`;\n\n    return this.http.get<Quote>(url).pipe(\n      map((res: any) => res.data),\n    );\n  }\n\n  /**\n   * @returns {Observable<Quote>}\n   */\n  getRandom(): Observable<Quote> {\n    const url = `${ this.apiBase }/quotes/random`;\n\n    return this.http.get<Quote>(url).pipe(\n      map((res: any) => res.data),\n    );\n  }\n\n  /**\n   * @param {string} tag\n   * @returns {Observable<Quote>}\n   */\n  getRandomByTag(tag: string): Observable<Quote> {\n    const url = `${ this.apiBase }/quotes/random-by-tag`;\n    const params = new HttpParams({ fromObject: { tag } });\n\n    return this.http.get<Quote>(url, { params });\n  }\n\n  share(quote: Quote, contactDetails?: ContactData): Observable<any> {\n    const url = `${ this.shareApiBase }/share`;\n\n    return this.http.post<any>(url, { quote, ...contactDetails });\n  }\n\n  create(quote: Quote): Observable<any> {\n    const url = `${ this.apiBase }/quotes`;\n\n    return this.http.post<any>(url, { quote });\n  }\n\n  delete(quoteId: string): Observable<any> {\n    const url = `${ this.apiBase }/quotes/${ quoteId }`;\n\n    return this.http.delete<any>(url);\n  }\n\n  edit(quote: Quote): Observable<any> {\n    const url = `${ this.apiBase }/quotes/${ quote.id }`;\n\n    return this.http.put<any>(url, quote);\n  }\n\n}\n","export * from './quote.service';\n","export * from './quote-api.service';\n","const quotes = require(\"../quotes.json\")\n\n/**\n * `parse_json` returns and Array of quote Objects.\n */\nfunction parse_json () {\n  return quotes;\n}\n\n/**\n * `random` returns a random quote\n * returns Object - a random quote from the list\n */\nfunction random () {\n  return quotes[Math.floor(Math.random() * quotes.length)];\n}\n\n/**\n * `random_by_tag` returns a random quote for a specific tag\n * returns Object - a random quote from the list with the desired tag\n */\nfunction random_by_tag (tag) {\n  const q_by_tag = quotes.filter((q) => {\n    return q.text.includes(tag) || (q.tags && q.tags.includes(tag))\n  })\n  return q_by_tag[Math.floor(Math.random() * q_by_tag.length)];\n}\n\n\n\n\nmodule.exports = {\n  parse_json: parse_json,\n  random: random,\n  random_by_tag: random_by_tag\n};\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\n\nimport { ToastrService } from 'ngx-toastr';\nimport quotesy from 'quotesy';\nimport { BehaviorSubject, Observable, of, throwError } from 'rxjs';\nimport { catchError, distinctUntilChanged, tap } from 'rxjs/operators';\n\nimport { environment } from '../../environments/environment';\nimport { QuoteApiService } from '../api-services';\nimport { ContactData, Quote } from '../models';\n\nexport const QUOTESY = new InjectionToken('QUOTESY', {\n  providedIn: 'root',\n  factory: () => quotesy,\n});\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QuoteService {\n  private isLoading$$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  isLoading$: Observable<boolean> = this.isLoading$$.asObservable();\n\n  private quote$$ = new BehaviorSubject<Quote>(null);\n  quote$: Observable<Quote> = this.quote$$.asObservable().pipe(distinctUntilChanged());\n\n  hasApiUrl = !!environment.apiUrls.quote;\n  hasShareApiUrl = !!environment.apiUrls.share;\n\n  constructor(\n    private quotesApi: QuoteApiService,\n    private toastrService: ToastrService,\n    @Inject(QUOTESY) private quotes: any,\n  ) {}\n\n  getRandom(): Observable<Quote> {\n    this.isLoading$$.next(true);\n\n    return (\n      this.hasApiUrl\n        ? this.quotesApi.getRandom()\n        : of(this.quotes.random())\n    ).pipe(\n      tap((quote: Quote) => this.emitQuote({ ...quote })),\n      tap(() => this.isLoading$$.next(false)),\n      catchError((err: any) => {\n        this.isLoading$$.next(false);\n\n        return throwError(err);\n      }),\n    );\n  }\n\n  getById(id: string): Observable<Quote> {\n    this.isLoading$$.next(true);\n\n    return this.quotesApi.getById(id).pipe(\n      tap(() => this.isLoading$$.next(false)),\n      catchError((err: any) => {\n        this.isLoading$$.next(false);\n\n        return throwError(err);\n      }),\n    );\n  }\n\n  edit(quote: Quote): Observable<any> {\n    this.isLoading$$.next(true);\n\n    return this.quotesApi.edit(quote).pipe(\n      tap(() => this.isLoading$$.next(false)),\n      tap(() => this.toastrService.success('Quote successfully edited.')),\n      catchError((err: any) => {\n        this.isLoading$$.next(false);\n\n        return throwError(err);\n      }),\n    );\n  }\n\n  create(quote: Quote): Observable<any> {\n    this.isLoading$$.next(true);\n\n    return this.quotesApi.create(quote).pipe(\n      tap(() => this.isLoading$$.next(false)),\n      tap(() => this.toastrService.success('Quote has been created.')),\n      catchError((err: any) => {\n        this.isLoading$$.next(false);\n\n        return throwError(err);\n      }),\n    );\n  }\n\n  getAll(): Observable<Quote[]> {\n    this.isLoading$$.next(true);\n\n    return (\n      this.hasApiUrl\n        ? this.quotesApi.getAll()\n        : of(this.quotes.parse_json())\n    ).pipe(\n      tap(() => this.isLoading$$.next(false)),\n      catchError((err: any) => {\n        this.isLoading$$.next(false);\n\n        return throwError(err);\n      }),\n    );\n  }\n\n  share(quote: Quote, contactData: ContactData): Observable<any> {\n    this.isLoading$$.next(true);\n\n    return this.hasShareApiUrl ?\n      this.quotesApi.share(quote, contactData) :\n      // eslint-disable-next-line no-console\n      of(null).pipe(\n        tap(() => console.info('shared: ', quote, contactData)),\n        tap(() => this.isLoading$$.next(false)),\n        tap(() => this.toastrService.success('Quote has been successfully shared.')),\n        catchError((err: any) => {\n          this.isLoading$$.next(false);\n\n          return throwError(err);\n        }),\n      );\n  }\n\n  delete(id: string): Observable<any> {\n    this.isLoading$$.next(true);\n\n    return this.quotesApi.delete(id).pipe(\n      tap(() => this.isLoading$$.next(false)),\n      tap(() => this.toastrService.success('Quote successfully removed.')),\n      catchError((err: any) => {\n        this.isLoading$$.next(false);\n\n        return throwError(err);\n      }),\n    );\n  }\n\n  private emitQuote(quote: Quote): void {\n    this.quote$$.next({ ...quote });\n  }\n\n}\n"]}